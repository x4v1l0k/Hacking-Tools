import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import argparse

def print_banner():
    banner = """
    **************************
    *        sendEmail       *
    *   Author: @xavilok     *
    **************************
    """
    print(banner)

def send_email(host, port, sender_email, sender_name, recipient, subject, body_file, body_format, attachment, use_mime):
	with open(body_file, 'r') as file:
		body = file.read()

	if use_mime:
		message = MIMEMultipart()
		message['From'] = f'{sender_name} <{sender_email}>' if sender_name else sender_email
		message['To'] = recipient
		message['Subject'] = subject

		if attachment:
			with open(attachment, 'rb') as attachment_file:
				attachment_mime = MIMEBase('application', 'octet-stream')
				attachment_mime.set_payload(attachment_file.read())
			encoders.encode_base64(attachment_mime)
			attachment_mime.add_header('Content-Disposition', f'attachment; filename="{attachment}"')
			message.attach(attachment_mime)

		message.attach(MIMEText(body, body_format))
		email_content = message.as_string()
	else:
		email_content = f"Subject: {subject}\n"
		email_content += f"From: {sender_name} <{sender_email}>\n" if sender_name else f"From: {sender_email}\n"
		email_content += f"To: {recipient}\n\n"
		email_content += body

	with smtplib.SMTP(host, port) as smtp_server:
		smtp_server.sendmail(sender_email, recipient.split(','), email_content)
	print(f"Email to {recipient} sent successfully")

if __name__ == "__main__":
	print_banner()

	parser = argparse.ArgumentParser(description='Send email via SMTP without authentication')
	parser.add_argument('-s', '--host', required=True, help='SMTP server')
	parser.add_argument('-p', '--port', required=True, type=int, help='SMTP port')
	parser.add_argument('-f', '--sender-email', required=True, help='Sender email address')
	parser.add_argument('-n', '--sender-name', required=False, help='Sender name')
	group = parser.add_mutually_exclusive_group(required=True)
	group.add_argument('-t', '--recipient', nargs='+', help='Recipient email(s)')
	group.add_argument('-l', '--recipient-list', help='Path to the recipient list file')
	parser.add_argument('-u', '--subject', required=True, help='Email subject')
	parser.add_argument('-b', '--body-file', required=True, help='Path to the body text file')
	parser.add_argument('-bf', '--body-format', required=False, help='Body format [plain|html]')
	parser.add_argument('-a', '--attachment', required=False, help='Path to the attachment file')
	parser.add_argument('-m', '--mime', type=int, choices=[0, 1], required=False, help='Use MIME (1) or not (0)')
	args = parser.parse_args()

	if not args.mime:
		use_mime = 0
		body_format = 'plain'
	else:
		use_mime = args.body_format
		body_format = 'plain' if not args.body_format else args.body_format

	if args.recipient_list:
		with open(args.recipient_list, 'r') as file:
			recipients = file.readlines()
		for recipient in recipients:
			send_email(args.host, args.port, args.sender_email, args.sender_name, recipient.strip(), args.subject, args.body_file, body_format, args.attachment, use_mime)
	else:
		recipients = ','.join(args.recipient)
		send_email(args.host, args.port, args.sender_email, args.sender_name, recipients, args.subject, args.body_file, body_format, args.attachment, use_mime)
